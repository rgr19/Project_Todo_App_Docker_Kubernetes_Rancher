dist: trusty
sudo: required
services:
  - docker

# Get Google Chrome headless browser for Angular tests
# Install latest Docker CE so we can use Dockerfile outside build context
addons:
  apt:
   packages:
      - docker-ce
# move chrome install to todo-view Dockerfile.dev (its failing here anyway)
#     - google-chrome-stable
#  sources:
#     - google-chrome

# Install any dependencies, update Docker Compose to 1.23.2 so we can use Dockerfile outside build context
before_install:
 - ./task/setup/install/docker_install.sh
# above script does what lines below
#  - docker --version
#  - docker-compose --version
#  - sudo rm /usr/local/bin/docker-compose
#  - curl -L https://github.com/docker/compose/releases/download/1.23.2/docker-compose-`uname -s`-`uname -m` > docker-compose
#  - chmod +x docker-compose
#  - sudo mv docker-compose /usr/local/bin
#  - docker-compose --version
#install:

env:
  - DOCKER_HUB_ID=$(cat .env/DOCKER_HUB_ID)
  - GITHUB_BRANCH=$(cat .env/GITHUB_BRANCH)
  - GITHUB_USER=$(cat .env/GITHUB_USER)

# Build development images for test
before_script:
  - docker build ./src/todo-view -f ./src/todo-view/Dockerfile.dev -t $DOCKER_HUB_ID/todo-view-test
  - docker build ./src/todo-cache-service -f ./src/common/Dockerfile.nodejs.dev -t $DOCKER_HUB_ID/todo-cache-service-test

# Run some tests
script:
  - docker run $DOCKER_HUB_ID/todo-view-test npm test -- --watch=false --no-progress --browsers=ChromeHeadlessNoSandbox
  - docker run $DOCKER_HUB_ID/todo-cache-service-test npm test

after_success:
  # Build Production Images for deployment
  - ./prod_dc build
  # Login to Docker Hub
  - echo "$DOCKER_HUB_PASSWORD" | docker login -u "$DOCKER_HUB_ID" --password-stdin
  # Take the built production images and push to Docker Hub
  - ./prod_dc push

deploy:
  provider: elasticbeanstalk
  region:  us-east-2
  app: Todo App
  env: todo-app-env
  bucket_name: elasticbeanstalk-us-east-2-277466026916
  bucket_path: todo-app
  on:
    branch: $GITHUB_BRANCH
  access_key_id: $AWS_ACCESS_KEY
  secret_access_key:
    secure: $AWS_SECRET_KEY
