NAME: todo-app
LAST DEPLOYED: Tue Feb 25 00:55:50 2020
NAMESPACE: default
STATUS: pending-install
REVISION: 1
TEST SUITE: None
USER-SUPPLIED VALUES:
{}

COMPUTED VALUES:
BACKEND:
  STATEFUL:
    ELASTICSEARCH:
      HOST: todo-elastic
      IMAGE:
        PULLPOLICY: Always
        TAG: 6.6.1
      MEMORY: 2Gi
      PORT:
        CLUSTER:
          HTTP: "9200"
          TRANSPORT: "9300"
        NAME:
          HTTP: es-http
          TRANSPORT: es-transport
        TARGET:
          HTTP: "9200"
          TRANSPORT: "9300"
      PV:
        HOSTPATH: /tmp/data/kubedata/todo/elastic
        STORAGE: 500Mi
      REPLICAS: "1"
    POSTGRES:
      HOST: todo-postgres
      IMAGE:
        PULLPOLICY: Always
        TAG: "1.0"
      MEMORY: 1Gi
      PORT:
        CLUSTER: "5432"
        NAME: database-tcp-port
        TARGET: "5432"
      PV:
        HOSTPATH: /tmp/data/kubedata/todo/postgres
        STORAGE: 500Mi
      REPLICAS: "1"
      SECRETS:
        DB: todo
        PASSWORD: todo1234
        USER: todo
    REDIS:
      HOST: todo-redis
      IMAGE:
        PULLPOLICY: Always
        TAG: 5.0.3
      MEMORY: 256Mi
      PORT:
        CLUSTER: "6379"
        NAME: cache-port
        TARGET: "6379"
      REPLICAS: "1"
  STATELESS:
    CACHE:
      INGESTION:
        IMAGE:
          PULLPOLICY: Always
          TAG: "1.0"
        MEMORY: 128Mi
        REPLICAS: "1"
      SERVICE:
        HOST: todo-cache-service
        IMAGE:
          PULLPOLICY: Always
          TAG: "1.0"
        MEMORY: 128Mi
        PORT:
          CLUSTER: "3000"
          NAME: http
          TARGET: "3000"
        REPLICAS: "2"
        URL: http://todo-cache-service:3000
    RABBITMQ:
      HOST: todo-rabbitmq
      IMAGE:
        PULLPOLICY: Always
        TAG: 3.7.13-management
      MEMORY: 500Mi
      PORT:
        CLUSTER:
          AMQP: "5672"
          HTTP: "8081"
        NAME:
          AMQP: amqp
          HTTP: http
        TARGET:
          AMQP: "5672"
          HTTP: "15672"
      REPLICAS: "1"
      SECRETS:
        DEFAULT:
          PASS: todo1234
          URL: amqp://todo:todo1234@todo-rabbitmq
          USER: todo
    SEARCH:
      INGESTION:
        IMAGE:
          PULLPOLICY: Always
          TAG: "1.0"
        MEMORY: 128Mi
        REPLICAS: "1"
      SERVICE:
        HOST: todo-search-service
        IMAGE:
          PULLPOLICY: Always
          TAG: "1.0"
        MEMORY: 128Mi
        PORT:
          CLUSTER: "3000"
          NAME: http
          TARGET: "3000"
        REPLICAS: "2"
        URL: http://todo-search-service:3000
    STORAGE:
      INGESTION:
        IMAGE:
          PULLPOLICY: Always
          TAG: "1.0"
        MEMORY: 128Mi
        REPLICAS: "1"
      SERVICE:
        HOST: todo-storage-service
        IMAGE:
          PULLPOLICY: Always
          TAG: "1.0"
        MEMORY: 128Mi
        PORT:
          CLUSTER: "3000"
          NAME: http
          TARGET: "3000"
        REPLICAS: "2"
        URL: http://todo-storage-service:3000
FRONTEND:
  VIEW:
    IMAGE:
      PULLPOLICY: Always
      TAG: "1.0"
    MEMORY: 768Mi
    PORT:
      CLUSTER:
        DEV: "4200"
        HTTP: "8080"
      NAME:
        DEV: dev
        HTTP: http
      TARGET:
        DEV: "4200"
        HTTP: "8080"
    REPLICAS: "1"
ROUTING:
  APIGATEWAY:
    IMAGE:
      PULLPOLICY: Always
      TAG: "1.0"
    MEMORY: 128Mi
    PORT:
      CLUSTER: "3000"
      NAME: http
      TARGET: "3000"
    REPLICAS: "2"
  PROXY:
    IMAGE:
      PULLPOLICY: Always
      TAG: "1.0"
    MEMORY: 128Mi
    PORT:
      CLUSTER: "8080"
      NAME: https
      TARGET: "80"
    REPLICAS: "2"
VARS:
  BUILD:
    TYPE: prod
  DOCKER:
    HUB:
      ID: onceawaken
  GITHUB:
    BRANCH: 009_todo_app_in_local_kubernetes
    USER: rgr19
  NAMESPACE: todo
  RUNTIME:
    TYPE: docker/prod

HOOKS:
MANIFEST:
---
# Source: todo-app/templates/todo-namespace.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: todo-app-0-0-0
---
# Source: todo-app/templates/todo-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  namespace: todo-app-0-0-0
  name: todo-secret
type: Opaque
stringData:
  secrets.yaml: QVdTX0tFWV9JRDogQUtJQVVCR1NEU09TSU1LSkVSQ04KQVdTX1NFQ1JFVF9LRVk6IDRXUU5oWnZFSU9kZWNaZ0RGV3czSEF3bVQrU3Myek0rWTJ1WE00VHMKRE9DS0VSX0hVQl9QQVNTV09SRDogRGFpc3kxMjMhCgoK
  POSTGRES_PASSWORD: todo1234
  POSTGRES_DB: todo
  POSTGRES_USER: todo
  RABBITMQ_DEFAULT_USER: todo
  RABBITMQ_DEFAULT_PASS: todo1234
  RABBITMQ_DEFAULT_URL: amqp://todo:todo1234@todo-rabbitmq
---
# Source: todo-app/templates/todo-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: todo-app-0-0-0
  name: todo-config
data:
  REDIS_CLUSTER_PORT: "6379"
  ELASTICSEARCH_CLUSTER_PORT: "9200"
  POSTGRES_CLUSTER_PORT: "5432"
  REDIS_HOST: "todo-redis"
  ELASTICSEARCH_HOST: "todo-elastic"
  POSTGRES_HOST: "todo-postgres"
  CACHE_SERVICE_URL: http://todo-cache-service:3000
  SEARCH_SERVICE_URL: http://todo-search-service:3000
  STORAGE_SERVICE_URL: http://todo-storage-service:3000
---
# Source: todo-app/templates/elastic-data-persistentvolumeclaim.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  namespace: todo-app-0-0-0
  name: elastic-data-pvc
spec:
  #  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 500Mi
---
# Source: todo-app/templates/postgres-data-persistentvolumeclaim.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  namespace: todo-app-0-0-0
  name: postgres-data-pvc
spec:
  #  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 500Mi
---
# Source: todo-app/templates/todo-api-gateway-service.yaml
apiVersion: v1
kind: Service
metadata:
  namespace: todo-app-0-0-0
  name: todo-api-gateway
  labels:
    todo-app-service: todo-api-gateway
spec:
  type: ClusterIP
  selector:
    todo-app-pod: todo-api-gateway
  ports:
  - name: http
    port: 3000
    targetPort: 3000
---
# Source: todo-app/templates/todo-cache-service-service.yaml
apiVersion: v1
kind: Service
metadata:
  namespace: todo-app-0-0-0
  name: todo-cache-service
  labels:
    todo-app-service: todo-cache-service
spec:
  type: ClusterIP
  selector:
    todo-app-pod: todo-cache-service
  ports:
  - name: http
    port: 3000
    targetPort: 3000
---
# Source: todo-app/templates/todo-elastic-service.yaml
apiVersion: v1
kind: Service
metadata:
  namespace: todo-app-0-0-0
  name: todo-elastic
  labels:
    todo-app-service: todo-elastic
spec:
  type: ClusterIP
  selector:
    todo-app-pod: todo-elastic
  ports:
  - name: es-http
    port: 9200
    targetPort: 9200
  - name: es-transport
    port: 9300
    targetPort: 9300
---
# Source: todo-app/templates/todo-postgres-service.yaml
apiVersion: v1
kind: Service
metadata:
  namespace: todo-app-0-0-0
  name: todo-postgres
  labels:
    todo-app-service: todo-postgres
spec:
  type: ClusterIP
  selector:
    todo-app-pod: todo-postgres
  ports:
    - name: database-tcp-port
      port: 5432
      targetPort:  5432
---
# Source: todo-app/templates/todo-proxy-service.yaml
apiVersion: v1
kind: Service
metadata:
  namespace: todo-app-0-0-0
  name: todo-proxy
  labels:
    todo-app-service: todo-proxy
spec:
  type: LoadBalancer
  selector:
    todo-app-pod: todo-proxy
  ports:
  - name: https
    port: 8080
    targetPort: 80
---
# Source: todo-app/templates/todo-rabbitmq-management-service.yaml
apiVersion: v1
kind: Service
metadata:
  namespace: todo-app-0-0-0
  name: todo-rabbitmq-management
  labels:
    todo-app-service: todo-rabbitmq-management
spec:
  type: NodePort
  selector:
    todo-app-pod: todo-rabbitmq
  ports:
  - name: http
    port: 8081
    targetPort: 15672
---
# Source: todo-app/templates/todo-rabbitmq-service.yaml
apiVersion: v1
kind: Service
metadata:
  namespace: todo-app-0-0-0
  name: todo-rabbitmq
  labels:
    todo-app-service: todo-rabbitmq
spec:
  type: ClusterIP
  selector:
    todo-app-pod: todo-rabbitmq
  ports:
  - name: amqp
    port:  5672
    targetPort: 5672
---
# Source: todo-app/templates/todo-redis-service.yaml
apiVersion: v1
kind: Service
metadata:
  namespace: todo-app-0-0-0
  name: todo-redis
  labels:
    todo-app-service: todo-redis
spec:
  type: ClusterIP
  selector:
    todo-app-pod: todo-redis
  ports:
  - name: cache-port
    port: 6379
    targetPort: 6379
status:
  loadBalancer: { }
---
# Source: todo-app/templates/todo-search-service-service.yaml
apiVersion: v1
kind: Service
metadata:
  namespace: todo-app-0-0-0
  name: todo-search-service
  labels:
    todo-app-service: todo-search-service
spec:
  type: ClusterIP
  selector:
    todo-app-pod: todo-search-service
  ports:
  - name: "http"
    port: 3000
    targetPort: 3000
---
# Source: todo-app/templates/todo-storage-service-service.yaml
apiVersion: v1
kind: Service
metadata:
  namespace: todo-app-0-0-0
  name: todo-storage-service
  labels:
    todo-app-service: todo-storage-service
spec:
  type: ClusterIP
  selector:
    todo-app-pod: todo-storage-service
  ports:
    - name: http
      port: 3000
      targetPort: 3000
---
# Source: todo-app/templates/todo-view-service.yaml
apiVersion: v1
kind: Service
metadata:
  namespace: todo-app-0-0-0
  name: todo-view
  labels:
    todo-app-service: todo-view
spec:
  type: ClusterIP
  selector:
    todo-app-pod: todo-view
  ports:
    - name: http
      port:  8080
      targetPort: 8080
---
# Source: todo-app/templates/todo-api-gateway-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: todo-app-0-0-0
  name: todo-api-gateway
  labels:
    todo-app-deployment: todo-api-gateway
spec:
  replicas: 2
  selector:
      matchLabels:
        todo-app-pod: todo-api-gateway
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  template:
    metadata:
      labels:
        todo-app-pod: todo-api-gateway
    spec:
      restartPolicy: Always
      initContainers:
      - name: init-rabbitmq
        image: busybox
        command: ['sh', '-c', 'until nslookup todo-rabbitmq; do echo waiting for RabbitMQ; sleep 2; done;']
      containers:
      - name: todo-api-gateway
        imagePullPolicy: Always
        image: onceawaken/todo-api-gateway:1.0
        envFrom:
          - configMapRef:
              name: todo-config
        ports:
        - containerPort: 3000
        resources:
          limits:
            memory: 128Mi
---
# Source: todo-app/templates/todo-cache-ingestion-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: todo-app-0-0-0
  name: todo-cache-ingestion
  labels:
    todo-app-deployment: todo-cache-ingestion
spec:
  replicas: 1
  selector:
      matchLabels:
        todo-app-pod: todo-cache-ingestion
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  template:
    metadata:
      labels:
        todo-app-pod: todo-cache-ingestion
    spec:
      restartPolicy: Always
      initContainers:
      - name: init-rabbitmq
        image: busybox
        command: ['sh', '-c', 'until nslookup todo-rabbitmq; do echo waiting for RabbitMQ; sleep 2; done;']
      containers:
      - name: todo-cache-ingestion
        image: onceawaken/todo-cache-ingestion:1.0
        imagePullPolicy: Always
        envFrom:
          - configMapRef:
              name: todo-config
        resources:
          limits:
            memory: 128Mi
---
# Source: todo-app/templates/todo-cache-service-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: todo-app-0-0-0
  name: todo-cache-service
  labels:
    todo-app-deployment: todo-cache-service
spec:
  replicas: 2
  selector:
      matchLabels:
        todo-app-pod: todo-cache-service
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  template:
    metadata:
      labels:
        todo-app-pod: todo-cache-service
    spec:
      restartPolicy: Always
      containers:
      - name: todo-cache-service
        image: onceawaken/todo-cache-service:1.0
        imagePullPolicy: Always
        envFrom:
          - configMapRef:
              name: todo-config
        ports:
        - containerPort: 3000
        resources:
          limits:
            memory: 128Mi
---
# Source: todo-app/templates/todo-elastic-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: todo-app-0-0-0
  name: todo-elastic
  labels:
    todo-app-deployment: todo-elastic
spec:
  replicas: 1
  selector:
    matchLabels:
      todo-app-pod: todo-elastic
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        todo-app-pod: todo-elastic
    spec:
      restartPolicy: Always
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
        runAsGroup: 1000
      containers:
        - name: todo-elastic
          image: elasticsearch:6.6.1
          imagePullPolicy: Always
          env:
            - name: discovery.type
              value: single-node
          ports:
            - name: es-http
              containerPort: 9200
            - name: es-transport
              containerPort: 9300
          resources:
            limits:
              memory: 2Gi
          volumeMounts:
            - mountPath: /usr/share/elasticsearch/data
              name: elastic-data
          readinessProbe:
            httpGet:
              path: /
              port: 9200
              scheme: HTTP
            timeoutSeconds: 6
            successThreshold: 3
          livenessProbe:
            httpGet:
              path: /_cluster/health
              port: 9200
              scheme: HTTP
            initialDelaySeconds: 360
            timeoutSeconds: 6
          securityContext:
            allowPrivilegeEscalation: false
      volumes:
        - name: elastic-data
          persistentVolumeClaim:
            claimName: elastic-data-pvc
---
# Source: todo-app/templates/todo-postgres-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: todo-app-0-0-0
  name: todo-postgres
  labels:
    todo-app-deployment: todo-postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      todo-app-pod: todo-postgres
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        todo-app-pod: todo-postgres
    spec:
      restartPolicy: Always
      initContainers:
        - name: init-todo-postgres
          image: busybox:1.28
          command: ['sh', '-c', 'printenv']
          envFrom:
            - secretRef:
                name: todo-secret
      containers:
        - name: todo-postgres
          image: onceawaken/todo-postgres:1.0
          imagePullPolicy: Always
          envFrom:
            - configMapRef:
                name: todo-config
          env:
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: todo-secret
                  key: POSTGRES_PASSWORD
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: todo-secret
                  key: POSTGRES_USER
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: todo-secret
                  key: POSTGRES_DB
          ports:
            - containerPort: 5432
          resources:
            limits:
              memory: 1Gi
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: postgres-data
          readinessProbe:
            exec:
              command: [ 'sh' , '-c', 'pg_isready -h localhost -U ${POSTGRES_USER}' ]
            initialDelaySeconds: 5
            timeoutSeconds: 1
            successThreshold: 3
          livenessProbe:
            exec:
              command: [ 'sh' , '-c', 'pg_isready -h localhost -U ${POSTGRES_USER}' ]
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
      volumes:
        - name: postgres-data
          persistentVolumeClaim:
            claimName: postgres-data-pvc
---
# Source: todo-app/templates/todo-proxy-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: todo-app-0-0-0
  name: todo-proxy
  labels:
    todo-app-deployment: todo-proxy
spec:
  replicas: 2
  selector:
      matchLabels:
        todo-app-pod: todo-proxy
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  template:
    metadata:
      labels:
        todo-app-pod: todo-proxy
    spec:
      restartPolicy: Always
      containers:
      - name: todo-proxy
        image: onceawaken/todo-proxy:1.0
        imagePullPolicy: Always
        ports:
        - containerPort: 80
        resources:
          limits:
            memory: 128Mi
---
# Source: todo-app/templates/todo-rabbitmq-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: todo-app-0-0-0
  name: todo-rabbitmq
  labels:
    todo-app-deployment: todo-rabbitmq
spec:
  replicas: 1
  selector:
      matchLabels:
        todo-app-pod: todo-rabbitmq
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        todo-app-pod: todo-rabbitmq
    spec:
      restartPolicy: Always
      containers:
        - name: todo-rabbitmq
          image: rabbitmq:3.7.13-management
          imagePullPolicy: Always
          envFrom:
            - configMapRef:
                name: todo-config
          env:
          - name: RABBITMQ_DEFAULT_PASS
            valueFrom:
              secretKeyRef:
                name: todo-secret
                key: RABBITMQ_DEFAULT_PASS
          - name: RABBITMQ_DEFAULT_USER
            valueFrom:
              secretKeyRef:
                name: todo-secret
                key: RABBITMQ_DEFAULT_USER
          - name: RABBITMQ_DEFAULT_URL
            valueFrom:
              secretKeyRef:
                name: todo-secret
                key: RABBITMQ_DEFAULT_URL
          ports:
          - name: http
            protocol: TCP
            containerPort: 15672
          - name: amqp
            protocol: TCP
            containerPort: 5672
          resources:
            limits:
              memory: 500Mi
          livenessProbe:
            exec:
              command: ["rabbitmqctl", "status"]
            initialDelaySeconds: 15
            periodSeconds: 60
            timeoutSeconds: 10
          readinessProbe:
            exec:
              command: ["rabbitmqctl", "status"]
            initialDelaySeconds: 10
            periodSeconds: 60
            timeoutSeconds: 10
---
# Source: todo-app/templates/todo-redis-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: todo-app-0-0-0
  name: todo-redis
  labels:
    todo-app-deployment: todo-redis
spec:
  replicas: 1
  selector:
      matchLabels:
        todo-app-pod: todo-redis
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  template:
    metadata:
      labels:
        todo-app-pod: todo-redis
    spec:
      restartPolicy: Always
      containers:
      - name: todo-redis
        image: redis:5.0.3
        imagePullPolicy: Always
        ports:
        - containerPort: 6379
        resources:
          limits:
            memory: 256Mi
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 15
          failureThreshold: 3
          successThreshold: 1
          periodSeconds: 10
          timeoutSeconds: 10
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 20
          failureThreshold: 3
          successThreshold: 1
          periodSeconds: 5
          timeoutSeconds: 1
---
# Source: todo-app/templates/todo-search-ingestion-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: todo-app-0-0-0
  name: todo-search-ingestion
  labels:
    todo-app-deployment: todo-search-ingestion
spec:
  replicas: 1
  selector:
      matchLabels:
        todo-app-pod: todo-search-ingestion
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  template:
    metadata:
      labels:
        todo-app-pod: todo-search-ingestion
    spec:
      restartPolicy: Always
      initContainers:
      - name: init-rabbitmq
        image: busybox
        command: ['sh', '-c', 'until nslookup todo-rabbitmq; do echo waiting for RabbitMQ; sleep 2; done;']
      - name: init-elastic
        image: busybox
        command: ['sh', '-c', 'until nslookup todo-elastic; do echo waiting for ElasticSearch; sleep 2; done;']
      containers:
      - name: todo-search-ingestion
        image: onceawaken/todo-search-ingestion:1.0
        imagePullPolicy: Always
        envFrom:
          - configMapRef:
              name: todo-config
        resources:
          limits:
            memory: 128Mi
---
# Source: todo-app/templates/todo-search-service-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: todo-app-0-0-0
  name: todo-search-service
  labels:
    todo-app-deployment: todo-search-service
spec:
  replicas: 2
  selector:
      matchLabels:
        todo-app-pod: todo-search-service
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  template:
    metadata:
      labels:
        todo-app-pod: todo-search-service
    spec:
      restartPolicy: Always
      initContainers:
      - name: init-elastic
        image: busybox
        command: ['sh', '-c', 'until nslookup todo-elastic; do echo waiting for ElasticSearch; sleep 2; done;']
      containers:
      - name: todo-search-service
        image: onceawaken/todo-search-service:1.0
        imagePullPolicy: Always
        envFrom:
          - configMapRef:
              name: todo-config
        ports:
        - containerPort: 3000
        resources:
          limits:
            memory: 128Mi
---
# Source: todo-app/templates/todo-storage-ingestion-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: todo-app-0-0-0
  name: todo-storage-ingestion
  labels:
    todo-app-deployment: todo-storage-ingestion
spec:
  replicas: 1
  selector:
      matchLabels:
        todo-app-pod: todo-storage-ingestion
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  template:
    metadata:
      labels:
        todo-app-pod: todo-storage-ingestion
    spec:
      restartPolicy: Always
      initContainers:
      - name: init-rabbitmq
        image: busybox
        command: ['sh', '-c', 'until nslookup todo-rabbitmq; do echo waiting for RabbitMQ; sleep 2; done;']
      containers:
      - name: todo-storage-ingestion
        image: onceawaken/todo-storage-ingestion:1.0
        imagePullPolicy: Always
        envFrom:
          - configMapRef:
              name: todo-config
        env:
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: todo-secret
              key: POSTGRES_PASSWORD
        resources:
          limits:
            memory: "128Mi"
---
# Source: todo-app/templates/todo-storage-service-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: todo-app-0-0-0
  name: todo-storage-service
  labels:
    todo-app-deployment: todo-storage-service
spec:
  replicas: 2
  selector:
      matchLabels:
        todo-app-pod: todo-storage-service
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  template:
    metadata:
      labels:
        todo-app-pod: todo-storage-service
    spec:
      restartPolicy: Always
      containers:
      - image: onceawaken/todo-storage-service:1.0
        imagePullPolicy: Always
        name: todo-storage-service
        envFrom:
          - configMapRef:
              name: todo-config
        env:
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: todo-secret
              key: POSTGRES_PASSWORD
        ports:
        - containerPort: 3000
        resources:
          limits:
            memory: "128Mi"
---
# Source: todo-app/templates/todo-view-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: todo-app-0-0-0
  name: todo-view
  labels:
    todo-app-deployment: todo-view
spec:
  replicas: 1
  selector:
    matchLabels:
      todo-app-pod: todo-view
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  template:
    metadata:
      labels:
        todo-app-pod: todo-view
    spec:
      restartPolicy: Always
      containers:
        - name: todo-view
          image: onceawaken/todo-view:1.0
          imagePullPolicy: Always
          envFrom:
            - configMapRef:
                name: todo-config
          ports:
            - containerPort: 4200
            - containerPort: 8080
          resources:
            limits:
              memory: 768Mi
---
# Source: todo-app/templates/todo-ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  namespace: todo-app-0-0-0
  name: todo-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
    - http:
        paths:
          - path: /
            backend:
              serviceName: todo-proxy
              servicePort: 80

